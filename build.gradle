/**
* Plugins Dependencies und Repositories
*/
buildscript {

    repositories {
         maven {
              url "http://lxbld01e.gavi-intra.de:8081/nexus/content/groups/portal/"
          }
         maven {
          url "https://plugins.gradle.org/m2/"
        }
    }
    
    
    dependencies {
        classpath "org.sonarsource.scanner.gradle:sonarqube-gradle-plugin:2.4"
        classpath group: 'pl.allegro.tech.build', name: 'axion-release-plugin', version: '1.6.0'
        classpath "org.ajoberstar:gradle-git:1.7.1"
        classpath "org.hidetake:gradle-ssh-plugin:2.9.0"
    }
    

}

// Apply the java plugin to add support for Java
apply plugin: 'java'
apply plugin: 'idea'
apply plugin: 'eclipse'
apply plugin: 'groovy'
apply plugin: 'application'
apply plugin: 'maven'
apply plugin: "org.sonarqube"
apply plugin: "org.ajoberstar.grgit"
apply plugin: 'pl.allegro.tech.build.axion-release'

project.version = scmVersion.version
mainClassName = 'de.svi.id.portal.deploymentManager.DeploymentManager'

// In this section you declare where to find the dependencies of your project
repositories {
    mavenLocal()
    maven { url "http://lxbld01e.gavi-intra.de:8081/nexus/content/groups/portal/"  }
    maven { url "http://lxbld01e.gavi-intra.de:8081/nexus/content/repositories/portal3rdParty/" }
    mavenCentral()
}

// In this section you declare the dependencies for your production and test code
dependencies {
    compile 'org.slf4j:slf4j-api:1.7.21'
    compile 'org.slf4j:slf4j-simple:1.7.21'
    
    
    //compile group: 'org.codehaus.groovy', name: 'groovy', version: '2.4.10'
    compile group: 'org.codehaus.groovy', name: 'groovy-all', version: '2.4.10'
	compile group: 'org.codehaus.groovy', name: 'groovy-ant', version: '2.4.10'
    compile group: 'commons-cli', name: 'commons-cli', version: '1.4'
    compile group: 'org.apache.httpcomponents', name: 'httpclient', version: '4.5.3'
    compile group: 'commons-io', name: 'commons-io', version: '2.5'
    compile group: 'commons-lang', name: 'commons-lang', version: '2.6'

    testCompile 'junit:junit:4.12'
}


project.version = scmVersion.version


//disable tar
tasks.distTar.enabled = false
distTar.enabled = false
// remove default zip and tar file
configurations.archives.artifacts.removeAll {it.type == 'tar'}
project.configurations.archives.artifacts.clear() 



// make jar executable
task uberjar(type: Jar,dependsOn:[':compileJava',':compileGroovy']) {
    from files(sourceSets.main.allSource)
    from files(sourceSets.main.output.classesDir)
    from files(sourceSets.main.resources.srcDirs)
    from configurations.runtime.asFileTree.files.collect { zipTree(it) }

    manifest {
        attributes 'Main-Class': mainClassName,
        'Implementation-Title': 'ID Portal DeploymentManager',
        'Implementation-Version': scmVersion.version
    }
}


artifacts {
    archives uberjar
}


uploadArchives {
    doFirst {
        println("current version: "+scmVersion.version)
    }
    repositories {
        mavenDeployer {
            repository(url: "${nexusUrl}/content/repositories/portalReleases/") {
              authentication(
                userName: nexusUsername,
                password: nexusPassword)
            }
            snapshotRepository(url: "${nexusUrl}/nexus/repository/portal-snapshot/") {
              authentication(
                userName: nexusUsername,
                password: nexusPassword)
            }
            pom.version = scmVersion.version
            pom.groupId = 'de.svi.portal.id.deploymentManager'
            pom.artifactId = rootProject.name
            
        }
    }
}




run {
    if (project.hasProperty('args')) {
        args project.args.split('\\s+')
    }
}


/**
 * SCM Commands
 */

def getVersionName = { ->
    try {
        def stdout = new ByteArrayOutputStream()
        exec {
            commandLine 'git', 'describe'
            standardOutput = stdout
        }
        return stdout.toString().trim()
    }
    catch (ignored) {
        return null;
    }
}



task createAndSwitchToFeatureFreeze << {
    def versionName = getVersionName()
    def releaseFFName = 'releases/' + versionName
    exec {
        commandLine 'git', 'checkout', '-b', releaseFFName
    }
    exec {
        commandLine 'git', 'push', '--set-upstream', 'origin', releaseFFName
    }
}


def getLastReleaseBranch = { ->
    try {
        def stdout = new ByteArrayOutputStream()
        exec {
            commandLine 'git', 'for-each-ref', '--count=1', 'refs/remotes/origin/releases/release-*', '--format=%(refname:short)', '--sort=-committerdate'
            standardOutput = stdout
        }
        return stdout.toString().trim()
    }
    catch (ignored) {
        return null;
    }
  }



task mergeReleaseInMaster << {
    
    //def lastReleaseBranch = getLastReleaseBranch()
    def lastReleaseBranch = "develop"
    
    exec {
        commandLine 'git', 'checkout', 'master'
    }
    exec {
        commandLine 'git', 'merge', lastReleaseBranch, '-m Release Merge'
    }
    exec {
        commandLine 'git', 'push'
    }
}



